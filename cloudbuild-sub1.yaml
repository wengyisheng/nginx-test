# cloudbuild-sub.yaml
#
# 此Cloud Build配置文件用于：
# 1. 从Git仓库构建Docker镜像。
# 2. 将构建的镜像推送到Google Artifact Registry。
# 3. 在指定的GCE实例上停止旧容器、拉取新镜像并运行新容器进行测试部署。

steps:
# 步骤1: 构建Docker镜像
# 使用gcr.io/cloud-builders/docker构建器来执行Docker build命令。
# -t 参数用于标记镜像，${_IMAGE_NAME} 是自定义替换变量，TAG_NAME是Cloud Build内置的标签名称变量。
# . 表示Docker上下文为当前目录（即代码库的根目录）。
# -f Dockerfile 明确指定Dockerfile的文件名为'Dockerfile'。
# 任何 Docker build 错误（例如，Dockerfile 语法错误或依赖下载失败）都将导致此步骤失败。
- name: 'gcr.io/cloud-builders/docker'
  id: '构建Docker镜像' # 步骤ID
  args:
  - 'build'
  - '-t'
  - 'us-east1-docker.pkg.dev/gcp-support-test-347006/wengyisheng/${_IMAGE_NAME}:${TAG_NAME}'
  - '.'
  - '-f'
  - 'Dockerfile'
  # 关于“代码加密”的说明：
  # 如果您的Dockerfile需要特殊参数或环境变量来处理加密的代码，
  # 可以在此处添加 --build-arg 或 ENV 参数。
  # 例如：- '--build-arg'
  #      - 'DECRYPTION_KEY=${_DECRYPTION_KEY}' # 假设_DECRYPTION_KEY是一个秘密替换变量或普通替换变量

# 步骤2: 推送Docker镜像到Artifact Registry
# 使用gcr.io/cloud-builders/docker构建器将标记的镜像推送到目标Artifact Registry仓库。
# 如果推送失败（例如，权限问题或仓库不可达），此步骤将失败。
- name: 'gcr.io/cloud-builders/docker'
  id: '推送至Artifact Registry' # 步骤ID
  args:
  - 'push'
  - 'us-east1-docker.pkg.dev/gcp-support-test-347006/wengyisheng/${_IMAGE_NAME}:${TAG_NAME}'

# 步骤3: 在测试实例上进行Docker运行测试
# 使用gcr.io/google.com/cloudsdktool/cloud-sdk构建器连接到GCE实例并执行命令。
# entrypoint设置为bash以便执行多行命令。
# --command 参数用于在远程实例上执行一系列Docker命令。
# 错误处理：
# - 'sudo docker stop ... || true': 如果容器不存在或停止失败，此命令会成功退出（因为有 || true），允许脚本继续。这是预期行为。
# - 'sudo docker rm ... || true': 同上，如果容器不存在或删除失败，此命令会成功退出，允许脚本继续。
# - 'sudo docker pull ... && sudo docker run ...': 使用 '&&' 链式操作。
#   如果 'pull' 命令失败（例如，镜像不存在，网络问题，认证失败），后续的 'run' 命令将不会执行。
#   'gcloud compute ssh' 命令会捕捉到远程命令的非零退出代码，从而导致此 Cloud Build 步骤失败。
#   如果 'pull' 成功但 'run' 失败（例如，端口冲突），此步骤也将失败。
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: '在VM上部署和测试' # 步骤ID
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # 使用gcloud compute ssh命令连接到GCE实例并执行Docker命令。
    # 替换'gcp-support-test-347006'为您的GCP项目ID。
    # 确保Cloud Build服务帐号拥有SSH到此VM的权限。
    # 如果gcloud ssh连接失败或远程命令执行过程中发生错误，此步骤将失败。
    gcloud compute ssh tp-link-dev-gpu-2 --zone=us-central1-c --project=gcp-support-test-347006 --strict-host-key-checking=no --command "\
      sudo docker stop nginx-test-container || true && \
      sudo docker rm nginx-test-container || true && \
      sudo docker pull us-east1-docker.pkg.dev/gcp-support-test-347006/wengyisheng/${_IMAGE_NAME}:${TAG_NAME} && \
      sudo docker run -d --name nginx-test-container -p 80:80 us-east1-docker.pkg.dev/gcp-support-test-347006/wengyisheng/${_IMAGE_NAME}:${TAG_NAME} \
    "
    echo "已在tp-link-dev-gpu-2上启动部署和测试。"

# 替换变量 (Substitutions)
# 您可以在Cloud Build触发器中定义或覆盖这些变量。
substitutions:
  _IMAGE_NAME: 'nginx-test' # Docker镜像的名称，这里默认为'nginx-test'。

# 构建选项
options:
  # log options 可以是 CLOUD_LOGGING_ONLY (默认) 或 GCS_AND_CLOUD_LOGGING
  logging: CLOUD_LOGGING_ONLY
  # machineType 可以设置为E2_HIGHCPU_8等更高的机器类型以加快构建速度
  machineType: 'E2_HIGHCPU_8'
